--(1)DATABASE EXPLORATION
--Explore all tables in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES

--Explore all columns in the database
SELECT * FROM INFORMATION_SCHEMA.Columns
WHERE TABLE_NAME = 'dim_customers'
------------------------------------------------------------------------------------------------------------------------
--(2) DIMENSION EXPLORATION 
-- Explore all countries that our customers come from 
SELECT DISTINCT country FROM gold.dim_customers -- our first little insight about our business 

--Explore all categories "The Major Divisions"
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_product --Major division our business works in 
ORDER BY 1,2,3
------------------------------------------------------------------------------------------------------------------------
--(3) DATE EXPLORATION
-- (3.1) Identify earliest and latest dates (Boundaries)
-- (3.2) Understand the scope of data and time span (Ex; 2 years, 10 years, etc...) Using Min/Max functions
-- Usually are found in Fact tables 

--Find dates of the first and last order 
SELECT 
	MIN(order_date) first_order_date,
	MAX(order_date) last_order_date,
	-- How many years of sales are available 
	DATEDIFF(year, MIN(order_date),MAX(order_date)) AS order_range_in_yrs
FROM gold.fact_sales
-- How many years of sales are available 

-- Find the oungest and oldest customer 
SELECT 
	MIN(birthdate) oldest_birthdate,
	DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_customer,
	MAX(birthdate) youngest_birthdate,
	DATEDIFF(year, MAX(birthdate), GETDATE()) AS youngest_customer,
	-- How many years of sales are available 
	DATEDIFF(year, MIN(birthdate),MAX(birthdate)) AS age_difference
FROM gold.dim_customers
------------------------------------------------------------------------------------------------------------------------
--(4) MEASURES EXPLORATION
--Find the total sales
SELECT SUM(sales_amount) FROM gold.fact_sales
--Fidn how many items are sold
SELECT SUM(quantity) total_quantity FROM gold.fact_sales
--Find the average selling price
SELECT AVG(price) avg_price FROM gold.fact_sales
--Find the Total # of Orders
SELECT COUNT( order_number) total_orders FROM gold.fact_sales
SELECT COUNT(DISTINCT order_number) total_orders FROM gold.fact_sales

--Find the Total # of Products
SELECT COUNT( product_key) total_products FROM gold.dim_product

--Find the Total # of Customers
SELECT COUNT( customer_key) total_customers FROM gold.dim_customers

--Find the Total # of Customers that have placed an order
SELECT COUNT(DISTINCT customer_key) total_customers_who_ordered FROM gold.fact_sales

--Generate a report that shows all key metrics of our business
SELECT 'Total Sales'as measure_name, SUM(sales_amount) As measure_value FROM gold.fact_sales
UNION ALL  
SELECT 'Total Quantity' as measure_name,SUM(quantity) measure_value FROM gold.fact_sales
UNION ALL  
SELECT 'Average Price' as measure_name, AVG(price) measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Total # Orders'as measure_name, COUNT(DISTINCT order_number) measure_value FROM gold.fact_sales
UNION ALL  
SELECT 'Total # Products' as measure_name, COUNT( product_key) measure_value FROM gold.dim_product
UNION ALL  
SELECT 'Total # Customers' as measure_name, COUNT( customer_key) measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Customers Who Ordered' as measure_name,COUNT(DISTINCT customer_key) measure_value FROM gold.fact_sales
------------------------------------------------------------------------------------------------------------------------
--(5) MAGNITUDE EXPLORATION
--(5.1) Compare measures values by categories
--(5.2) Helps us understand the importance of different categories
--AGGREGATE[Measure] BY [DIMENSION]


--TASKS
--Find the total customers by country
SELECT country, 
COUNT (customer_key) as total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC




--Find the total customers by gender
SELECT gender, 
COUNT(customer_key) as total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC



--Find the total products by category
SELECT 
category, 
COUNT(product_key) as total_products
FROM gold.dim_product
GROUP BY category
ORDER BY total_products DESC
--What is the Average cost in each category
SELECT 
category, 
AVG(cost) as average_cost
FROM gold.dim_product
GROUP BY category
ORDER BY average_cost DESC





-- What is the total revenue generated by each category
-- Total revnue= Fact Table 
-- Category= Dim Table
-- Need to join tables
SELECT 
p.category,
SUM(f.sales_amount) as total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_product p
ON p.product_key= f.product_key
GROUP BY category
ORDER BY total_revenue DESC



-- What is the total revenue generated by each customer
SELECT 
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) as total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key= f.customer_key
GROUP BY c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC



--What is the distribution of sold items across countries 
SELECT 
c.country,
SUM(f.quantity) as total_sold_items_per_country
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key= f.customer_key
GROUP BY c.country
ORDER BY total_sold_items_per_country DESC


------------------------------------------------------------------------------------------------------------------------
--(6) RANKING ANALYSIS
-- Order  the values of diemnsions by measures
-- Top N performers | Bottom N performers
--RANK[DIMENSION]BY[MEASURE]

--Which 5 products generate the highest revenue?

SELECT TOP 5
p.product_name,
SUM(f.sales_amount) as total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_product p
ON p.product_key= f.product_key
GROUP BY product_name
ORDER BY total_revenue DESC


--What are the 5 worst-performing products in terms of sales?

SELECT TOP 5
p.product_name,
SUM(f.sales_amount) as total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_product p
ON p.product_key= f.product_key
GROUP BY product_name
ORDER BY total_revenue 

-- Find the Top-10 customers who have generated the highest revenue 

SELECT TOP 10 
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) as total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key= f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

-- Find lowest-3 customers with fewest orders 

SELECT TOP 3 
c.customer_key,
c.first_name,
c.last_name,
COUNT(DISTINCT f.order_number) as total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key= f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_orders 
